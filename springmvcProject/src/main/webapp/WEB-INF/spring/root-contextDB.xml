<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xsi:schemaLocation="http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.3.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	
	<!-- package 여러개 하려면 ,(콤마)로 연결해서 작성 -->
	<context:component-scan base-package="com.shinhan.myapp,net.firstzone"></context:component-scan>
	
	<!-- properties 1개 읽기 -->
	<!-- <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="/WEB-INF/spring/appServlet/oracleDB.properties"/>
        <property name="fileEncoding" value="UTF-8" />
 	</bean> -->
 	
 	<!-- properties 여러개 읽기 -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
        	<list>
        		<value>/WEB-INF/spring/appServlet/oracleDB.properties</value>
        		<value>classpath:/application.properties</value>
        	</list>
        </property>
        <property name="fileEncoding" value="UTF-8" />
 	</bean>
 	
 	<!-- sqlSession을 생성해줌 -->
 	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation" value="classpath:mybatis/sqlMapConfig.xml" />
		<property name="mapperLocations" value="classpath:mybatis/mappers/*Mapper.xml" />
	</bean>
	
	<!-- SQL문 실행하여 DB객체와 JAVA객체를 Mapping해줌 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactory"></constructor-arg>
	</bean>
 	
<!--	1. 사용자가 Browser 요청
		2. Filter → FrontController → Controller
		3. Service
		4. DAOMybatis
		5. sqlSession
		6. sqlSessionFactory
		7. dataSource(dataSourceOriginal + log 남기는 방법)
		8. dataSourceOriginal
		9. DB -->
	<bean id="dataSource"  class="net.sf.log4jdbc.Log4jdbcProxyDataSource">
		<constructor-arg ref="dataSourceOriginal" />
		<property name="logFormatter" >
			<bean class="net.sf.log4jdbc.tools.Log4JdbcCustomFormatter">
			<property name="loggingType" value="MULTI_LINE"></property>
			<property name="sqlPrefix" value="[ SQL문장 ] "></property>
			</bean>
		</property>
	</bean>
	
	
	<!-- 3.JNDI로 Connection Pooling 사용하기 -->
	<!-- <jee:jndi-lookup jndi-name="jdbc/myoracle" id="dataSourceOriginal" resource-ref="true"></jee:jndi-lookup> -->
	
	<!-- 2.Connection Pooling 사용하기 -->
	<bean id="dataSourceOriginal" class="org.apache.commons.dbcp2.BasicDataSource">
		<property name="driverClassName" value="${driverClassName}" />
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
	</bean>
	
	<!-- 1.DriverManager 사용하기 -->
	<!-- <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${driverClassName}" />
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
	</bean> -->
		
</beans>
